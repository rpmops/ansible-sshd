---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# --------------------
#   OpenSSH packages
# --------------------

# .. envvar:: sshd_base_packages
#
# List of base packages that should be installed for OpenSSH support.
sshd_base_packages: [ 'openssh-server', 'openssh-clients' ]

# .. envvar:: sshd_packages
#
# List of additional packages to install.
sshd_packages: []


# -----------------------------------
#   Host whitelists and allow lists
# -----------------------------------

# .. envvar:: sshd_whitelist
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a global list.
sshd_whitelist: []


# .. envvar:: sshd_group_whitelist
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a group-based list.
sshd_group_whitelist: []


# .. envvar:: sshd_host_whitelist
#
# List of IP addresses or CIDR subnets which should be allowed to connect to
# SSH without any restrictions. This list does not disallow connections from
# other hosts. This is a host-based list.
sshd_host_whitelist: []


# .. envvar:: sshd_allow
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in ``iptables``. This is a global list.
sshd_allow: []


# .. envvar:: sshd_group_allow
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in ``iptables``. This is a group list.
sshd_group_allow: []


# .. envvar:: sshd_host_allow
#
# List of IP addresses or CIDR subnets that should be allowed to access SSH
# service. If it's set, access from hosts and networks not specified here is
# denied in TCP Wrappers and limited in ``iptables``. This is a host list.
sshd_host_allow: []


# ------------------------------
#   TCP Wrappers configuration
# ------------------------------

# .. envvar:: sshd_tcpwrappers_default
#
# If list of allowed hosts is not specified, this value will be set in TCP
# Wrappers for ``sshd`` service. By default any host is allowed to connect.
sshd_tcpwrappers_default: 'ALL'


# ---------------------------------
#   Firewall (ferm) configuration
# ---------------------------------

# .. envvar:: sshd_ferm_limit
#
# Enable or disable limited SSH access from all hosts in ``ip(6)tables``.
# Recent new connections are filtered and when too many new connections are
# created in specified time window, host is added to the recent blocklist.
sshd_ferm_limit: True


# .. envvar:: sshd_ferm_limit_seconds
#
# Length of the time window used by firewall to catch new offenders,
# by default 5 minutes.
sshd_ferm_limit_seconds: '{{ (60 * 5) }}'


# .. envvar:: sshd_ferm_limit_hits
#
# How many new connections to allow in specified time window.
sshd_ferm_limit_hits: '8'


# .. envvar:: sshd_ferm_limit_destination
#
# Name of the iptables recent list where offenders will be added.
sshd_ferm_limit_destination: 'badguys'


# .. envvar:: sshd_ferm_ports
#
# List of TCP ports to open in the firewall for SSH connections. You can use
# port numbers or service names from ``/etc/services``.
sshd_ferm_ports: [ 'ssh' ]


# --------------------------------
#   OpenSSH server configuration
# --------------------------------

# .. envvar:: sshd_ports
#
# List of ports which ``sshd`` will listen on.
sshd_ports: [ '22' ]


# .. envvar:: sshd_listen
#
# List of IP addresses on which ``sshd`` should listen for new connections. If
# it's empty, ``sshd`` listens on all interfaces.
sshd_listen: []


# .. envvar:: sshd_host_keys
#
# List of SSH host keys that should be enabled, in order of preference.
sshd_host_keys: [ 'ed25519', 'rsa', 'ecdsa' ]


# .. envvar:: sshd_banner
#
# Path to file which should be displayed before user authentication.
sshd_banner: 'none'


# .. envvar:: sshd_log_level
#
# How much information should be logged by ``sshd`` server.
sshd_log_level: 'INFO'


# .. envvar:: sshd_permit_root_login
#
# Specify if access to ``root`` account should be granted. By default ``root``
# can be accessed only using SSH public keys.
sshd_permit_root_login: 'without-password'


# .. envvar:: sshd_password_authentication
#
# Enable or disable password authentication.
sshd_password_authentication: 'no'


# .. envvar:: sshd_x11_forwarding
#
# Enable or disable X11 forwarding by the server.
sshd_x11_forwarding: 'no'


# .. envvar:: sshd_max_auth_tries
#
# Maximum number of failed authentication attempts allowed by the server.
sshd_max_auth_tries: '4'


# .. envvar:: sshd_max_startups
#
# Maximum number of unauthenticated connections (3), after which there's 80%
# probability of next unauthenticated connection to be dropped, finishing at 7,
# after which all new unauthenticated connections will be refused.
sshd_max_startups: '3:80:7'


# .. envvar:: sshd_login_grace_time
#
# Time after which unauthenticated sessions are disconnected.
sshd_login_grace_time: '20s'


# .. envvar:: sshd_privilege_separation
#
# Specify if ``sshd`` should use unprivileged processes for incoming session
# authentication. Setting this to ``sandbox`` enables use of additional
# kernel restrictions.
sshd_privilege_separation: 'yes'


# .. envvar:: sshd_custom_options
#
# Additional ``sshd_config(5)`` options specified in a YAML text block format.
sshd_custom_options: ''


# ------------------------------
#   Group-based access control
# ------------------------------

# .. envvar:: sshd_allow_groups
#
# List of UNIX groups which allow connections to SSH service (global).
sshd_allow_groups: [ 'root', 'admins', 'sshusers', 'sftponly' ]


# .. envvar:: sshd_group_allow_groups
#
# List of UNIX groups which allow connections to SSH service (host group).
sshd_group_allow_groups: []


# .. envvar:: sshd_host_allow_groups
#
# List of UNIX groups which allow connections to SSH service (host).
sshd_host_allow_groups: []


# ------------------------------
#   Authorized keys management
# ------------------------------

# .. envvar:: sshd_authorized_keys
#
# List of files which contain SSH public keys, to be used to authenticate
# remote users.
sshd_authorized_keys: '{{ sshd_authorized_keys_system +
                          sshd_authorized_keys_user }}'


# .. envvar:: sshd_authorized_keys_system
#
# List of system-wide files containing SSH public keys. These files are
# expected to be maintained by system administrator and might be used in
# restricted environments (for example SFTPonly accounts).
sshd_authorized_keys_system:
  - '/etc/ssh/authorized_keys/%u'


# .. envvar:: sshd_authorized_keys_user
#
# List of user files containing SSH public keys. These files are maintained by
# the users themselves.
sshd_authorized_keys_user:
  - '%h/.ssh/authorized_keys'


# ---------------------------------
#   System-wide host fingerprints
# ---------------------------------

# .. envvar:: sshd_known_hosts
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (global).
sshd_known_hosts: []


# .. envvar:: sshd_group_known_hosts
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (host group).
sshd_group_known_hosts: []


# .. envvar:: sshd_host_known_hosts
#
# List of FQDN hostnames that should be scanned to add host fingerprints to the
# system-wide known hosts file (host).
sshd_host_known_hosts: []


# .. envvar:: sshd_known_hosts_file
#
# System-wide file where host fingerprints are stored.
sshd_known_hosts_file: '/etc/ssh/ssh_known_hosts'


# .. envvar:: sshd_known_hosts_command
#
# Command used to scan host fingerprints into system-wide known hosts file.
sshd_known_hosts_command: 'ssh-keyscan -H -T 10'


# ----------------------------
#   Match conditional blocks
# ----------------------------

# .. envvar:: sshd_match_list
#
# List of conditional ``Match`` blocks to include in ``sshd_config``.
# Required parameters:
#
# - ``match``: specify User, Group, or other Match arguments which should
#   activate a given configuration block.
#
# - ``options``: YAML text block which contains ``sshd_config(5)`` options
#   active in a given Match block.
#
sshd_match_list: [ '{{ sshd_match_group_sftponly }}' ]


# .. envvar:: sshd_match_group_sftponly
#
# Default ``Match`` conditional block which defines configuration for SFTPonly
# accounts.
sshd_match_group_sftponly:
  match: 'Group sftponly'
  options: |
    ChrootDirectory %h
    X11Forwarding no
    AllowAgentForwarding no
    AllowTcpForwarding no
    ForceCommand internal-sftp

